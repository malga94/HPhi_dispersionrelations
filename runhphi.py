#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Apr  7 13:21:55 2019

@author: fmalgarini
"""

import os
import re
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

dynamicalGreen_file_columns = ["omega_Re", "omega_Im", "Re(G(z))", "Im(G(z))"]

input_file_syntax = {
	"model": 0,
	"method": 1,
	"lattice": 2,
	"L": 3,
	"J": 4,
	"h": 5,
	"EigenvecIO": 6
}

def modify_inputfile():

	os.system("chmod 777 generate_inputfile.sh")
	os.system("./generate_inputfile.sh")

def modify_modpara(gs_energy):

	os.chdir("./PrepareData")
	sed_command_for_DGF = "sed -e 's/OmegaOrg.*/OmegaIm        4.2/' modpara.def | sed 's/NOmega.*/NOmega         500/' | sed 's/OmegaMax.*/OmegaMax       7/' | sed 's/OmegaMin.*/OmegaMin       {0}/g' > modpara.def.tmp && mv modpara.def.tmp modpara.def".format(gs_energy)
	os.system(sed_command_for_DGF)
	os.chdir("..")

def modify_calcmod():
	
	os.chdir("./PrepareData")
	sed_command_for_DGF = "sed -e 's/CalcSpec.*/CalcSpec   1/' calcmod.def | sed 's/InputEigenVec.*/InputEigenVec    1/' | sed 's/OutputEigenVec.*/OutputEigenVec    0/' > calcmod.def.tmp && mv calcmod.def.tmp calcmod.def"
	os.system(sed_command_for_DGF)
	os.chdir("..")

def get_dimensions():

	try:
		with open("./PrepareData/Standard.in", "r") as f:
			input_file = f.read()

		site_number = input_file.splitlines()[input_file_syntax["L"]].split("=")[1].replace(" ", "")
		return int(site_number)	
	except:
		return 1

def get_energy():

	with open("./PrepareData/output/zvo_energy.dat", "r") as f:
		energy_file = f.read()

	energy = energy_file.splitlines()[0].split(" ")[2]
	
	return float(energy)

def clear_workspace(site_number):

	for i in range(0, site_number):
		os.system("rm -Rf kx{0}".format(i/site_number))

	try:
		os.chdir("./PrepareData")
	#If the directory does not exist we create it
	except:
		os.mkdir("./PrepareData")
		os.chdir("./PrepareData")

	os.system("rm -R output calcmod.def coulombinter.def exchange.def geometry.dat greenone.def greentwo.def hund.def lattice.gp locspn.def modpara.def namelist.def pair.def > >&/dev/null")
	os.chdir("..")

def run_Hphi(i, site_number):
	
	os.system("cp -R PrepareData kx{0}".format(i/site_number))
	os.system("./writepair {0} {1} > ./kx{0}/pair.def".format(i/site_number, site_number))
	os.chdir("./kx{0}".format(i/site_number))
	os.system("../HPhi -e namelist.def > kx{0}_job.out".format(i/site_number))
	os.chdir("..")

def generate_plot(i, df, site_number):
	
	os.chdir("./kx{0}".format(i/site_number))
	temp_df = pd.read_csv("./output/zvo_DynamicalGreen.dat", header = None, index_col=False, names = dynamicalGreen_file_columns, sep = ' ')
	
	min_val = temp_df[temp_df['Im(G(z))']==temp_df['Im(G(z))'].min()].iloc[0]
	
	df = df.append(min_val)
	os.chdir("..")	
	return df

def main():

	#We define the dataframe which will contain the dynamical Green function (DGF for short); our aim is to plot the k values against the real frequencies column of this dataframe
	df = pd.DataFrame(columns = dynamicalGreen_file_columns)
	#This gets the number of sites from the previous run, in order to remove all the directories that were created and start with a clean build
	old_site_number = get_dimensions()

	#This is the function which clears everything generated by the previous run, allowing us to perform a new run from scratch (except the final plot of course, which is kept)
	clear_workspace(old_site_number)
	#Now we modify the Standard.in input file according to the specifications given by the user, selecting the correct model, dimensions ect...
	modify_inputfile()
	#This is the new site number, in case the user modified it with respect to the previous run
	new_site_number = get_dimensions()

	#Trying to compile the c script used to generate the pair.def file
	try:
		os.system("gcc -o writepair writepair.c")
	except:
		raise IOError("Error: could not compile 'writepair.c'. Please compile the c program manually before running this script")

	#Now we run HPhi in standard mode, to generate the eigenvector (needed for the calculation of the DGF). Also all the input files for expert mode are automatically generated, altough we will need to modify them a bit
	os.chdir("./PrepareData")
	os.system("../HPhi -s Standard.in > std_job.out")
	os.chdir("..")

	gs_energy = get_energy()
	#Necessary modifications to the input files to compute the DGF: read the HPhi manual for more details
	modify_modpara(gs_energy)
	modify_calcmod()

	#Running HPhi for N equally spaced values of K between 0 and 1, where N is the number of sites specified
	for i in range(0, new_site_number):
		run_Hphi(i, new_site_number)

	#Preparing the df to contain the correct information to be plotted. We want the value of the real part of the frequency for which the imaginary part of the DGF is minimum
	for i in range(0, new_site_number):
		df = generate_plot(i, df, new_site_number)

	df = df.append(df.iloc[0])
	df.to_csv("./Dispersion_relation.def")
	#Prepare the plot of the K values versus the real parts of the frequency omega
	plt.plot(np.linspace(0, 1, new_site_number+1), list(df.iloc[:,0]))
	plt.show()

if __name__ == '__main__':
	main()



